NAME
    errno - return or set a the global calc_errno value

SYNOPSIS
    errno([errnum | "E_STRING"])

TYPES
    errnum      integer
    E_STRING    string

    return      integer

DESCRIPTION
    With errno(errnum) numeric argument:

        For 0 < errnum <= 32767:

            errno(errnum) sets "global calc_errno value" to the value
            errnum and returns its previous value.  Unlike error(errnum)
            calling errno(errnum) does NOT increment the global calc
            error count (see help errcount).

        For all other errnum values:

            An error error condition is raised about the valid errnum.

    With errno("E_STRING") string argument:

        If E_STRING is a valid errsym code, then the E_STRING errsym
        is converted into an equivalent errnum and errno is set to errnum.

        If E_STRING is not a valid errsym code, an error error condition
        is raised about the invalid E_STRING.

        For example, these two calls are equivalent:

            errno(10003);       /* error 10003 has a E_STRING of "E_ADD" */
            errno("E_ADD");     /* error 10003 has a E_STRING of "E_ADD" */

        See help errsym for information on E_STRING errsym codes.

        For a list of the E_STRING associated with calc computation error
        codes, see help errorcodes.

    With errno() no argument:

        errno() returns the current value of "global calc_errno
        value".  Unlike error() calling errno() does NOT increment
        the global calc error count (see help errcount).

    NOTE:

        The errno() builtin should not be confused with the errno
        used by libc in C.  The range of errnum extend beyond the
        C's libc errno.  See help error for information on the mean
        of various errnum ranges.

    Unlike error() calling errno() does NOT increment the global
    calc error count (see help errcount).

    Whenever an operation or evaluation of function returns an error-value,
    the numerical code for that value is stored as "global calc_errno value".

    The term "global calc_errno value" is an internal calc state.
    This is NOT a calc variable called calc_errno.

    To detect whether an error occurs during some sequence of operations,
    one may immediately before that sequence set the stored error-number
    to zero by errno(0), and then after the operations, whether or not
    an error has occurred will be indicated by errno() being nonzero or
    zero.  If a non-zero value is returned, that value will be the code
    for the most recent error encountered.

    The default argument for the functions error() and strerror() is the
    currently stored error-number; in particular, if no error-value has
    been returned after the last errno(0), strerror() will return
    "No error".

EXAMPLE
    ; ## Assuming there is no file with name "not_a_file"

    ; errcount(0),; errmax(20),;
    ; print errcount(), errmax()
    0 20

    ; badfile = fopen("not_a_file", "r")
    ; print errcount(), errno(), strerror()
    1 2 No such file or directory

    ; a = 1/0
    ; print errcount(), errno(), strerror()
    2 10001 Division by zero

LIMITS
    0 <= errnum <= 32767

    E_STRING is string that must match the regular expression: ^E_[A-Z0-9_]+$

LINK LIBRARY
    int calc_errno;                             /* global calc_errno value */
    int set_errno(int e);

    CONST struct errtbl error_table[ECOUNT+2];  /* calc error codes, error symbols and error messages */

    bool is_e_digits(CONST char *errsym);
    bool is_valid_errnum(int errnum);
    bool is_errnum_in_error_table(int errnum);
    bool is_e_1string(CONST char *errsym);
    bool is_e_2string(CONST char *errsym);
    struct errtbl *find_errsym_in_errtbl(CONST char *errsym, CONST struct errtbl *tbl);
    struct errtbl *find_errnum_in_errtbl(int errnum, CONST struct errtbl *tbl);
    CONST struct errtbl *lookup_errnum_in_error_table(int errnum);
    int errsym_2_errnum(CONST char *errsym);
    char *errnum_2_errsym(int errnum, bool *palloced);
    char *errnum_2_errmsg(int errnum, bool *palloced);
    char *errsym_2_errmsg(CONST char *errsym, bool *palloced);

SEE ALSO
    errcount, errmax, errorcodes, errsym, iserror, newerror, stoponerror, strerror

## Copyright (C) 1999-2006,2021,2023  Landon Curt Noll
##
## Calc is open software; you can redistribute it and/or modify it under
## the terms of the version 2.1 of the GNU Lesser General Public License
## as published by the Free Software Foundation.
##
## Calc is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
## Public License for more details.
##
## A copy of version 2.1 of the GNU Lesser General Public License is
## distributed with calc under the filename COPYING-LGPL.  You should have
## received a copy with calc; if not, write to Free Software Foundation, Inc.
## 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##
## Under source code control:   1994/10/27 03:05:08
## File existed as early as:    1994
##
## chongo <was here> /\oo/\     http://www.isthe.com/chongo/
## Share and enjoy!  :-)        http://www.isthe.com/chongo/tech/comp/calc/
